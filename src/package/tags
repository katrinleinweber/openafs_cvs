AddBlkEntry	test.c	/^AddBlkEntry(f, p, o, m, u)$/
AddChrEntry	test.c	/^AddChrEntry(f, p, o, m, u)$/
AddDirEntry	test.c	/^AddDirEntry(f, p, o, m, u)$/
AddEntry	conftree.c	/^int AddEntry(filetype, updtspec, filename, prototy/
AddLnkEntry	test.c	/^AddLnkEntry(f, p, o, m, u)$/
AddRegEntry	test.c	/^AddRegEntry(f, p, o, m, u)$/
AddSockEntry	test.c	/^AddSockEntry(f)$/
AllocConfigNode	conftree.c	/^static CTREEPTR AllocConfigNode()$/
ApplyConfigTree	conftree.c	/^ApplyConfigTree(func)$/
BuildConfigTree	conftree.c	/^int BuildConfigTree(f)$/
CheckMount	check.c	/^static CheckMount(path)$/
FixDir	update.c	/^static int FixDir(np, path)$/
FixLostFoundDir	update.c	/^static int FixLostFoundDir(path)$/
FixReg	update.c	/^static FixReg(np, path)$/
GetArgs	package.c	/^static GetArgs(argc, argv)$/
InitializeConfigTree	conftree.c	/^int InitializeConfigTree()$/
LocateChildNode	conftree.c	/^CTREEPTR LocateChildNode(dp, name, lmode)$/
LocatePathNode	conftree.c	/^CTREEPTR LocatePathNode(dp, path, lmode)$/
Mpackage	package.c	/^main(argc, argv)$/
Mtest	test.c	/^main(argc, argv)$/
TraverseConfigTree	conftree.c	/^TraverseConfigTree(np, path, func)$/
UpdateDev	update.c	/^static UpdateDev(np, path)$/
UpdateDir	update.c	/^static UpdateDir(np, path)$/
UpdateLnk	update.c	/^static UpdateLnk(np, path)$/
UpdateReg	update.c	/^static UpdateReg(np, path)$/
UpdateSock	update.c	/^static UpdateSock(np, path)$/
ValidUpdtSpec	conftree.c	/^static int ValidUpdtSpec(ftype, uspec)$/
ValidateGroupName	conftree.c	/^static int ValidateGroupName(name, gidp)$/
ValidateUserName	conftree.c	/^static int ValidateUserName(name, uidp)$/
allprint	misc.c	/^allprint(i)$/
check	check.c	/^int check(np, path)$/
cp	fileops.c	/^int cp(from,to)$/
dbgprint	globals.h	/^#define	dbgprint(x)   {fprintf x ; fflush(stderr);/
dochmod	update.c	/^static dochmod(np, path)$/
dochown	update.c	/^static dochown(np, path)$/
dochtim	update.c	/^static dochtim(np, path)$/
dochtyp	update.c	/^static dochtyp(np, path)$/
ecalloc	globfuncs.c	/^char *ecalloc(nelem, size)$/
echo_modeinfo	test.c	/^echo_modeinfo(m)$/
echo_ownerinfo	test.c	/^echo_ownerinfo(o)$/
echo_prototypeinfo	test.c	/^echo_prototypeinfo(p)$/
echo_updateoptions	test.c	/^echo_updateoptions(u)$/
efopen	globfuncs.c	/^FILE *efopen(filename, type)$/
emalloc	globfuncs.c	/^char *emalloc(size)$/
fatal	messages.c	/^\/* VARARGS1 *\/fatal(cp) char *cp; \/*ARGSUSED*\/ {}$/
ln	fileops.c	/^int ln(from,to)$/
loudonly_message	messages.c	/^\/* VARARGS1 *\/loudonly_message(cp) char *cp; \/*ARG/
message	messages.c	/^\/* VARARGS1 *\/message(cp) char *cp; \/*ARGSUSED*\/ {/
mklostfound	fileops.c	/^int mklostfound(path)$/
mv	fileops.c	/^int mv(from,to)$/
namehash	conftree.c	/^static int namehash(name)$/
putformat	messages.c	/^static char *putformat(dp,fp,ap)$/
putnum	messages.c	/^static char *putnum(dp,n,b)$/
putstr	messages.c	/^static char *putstr(dp,s)$/
rm	fileops.c	/^int rm(path)$/
sprint	misc.c	/^sprint(s)$/
update	update.c	/^int update(np, path)$/
usage	package.c	/^static usage()$/
verbose_message	messages.c	/^\/* VARARGS1 *\/verbose_message(cp) char *cp; \/*ARGS/
yyerror	misc.c	/^yyerror()$/
yywrap	misc.c	/^yywrap()$/
